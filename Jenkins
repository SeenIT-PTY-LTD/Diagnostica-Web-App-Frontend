pipeline{
    agent any
    
 environment{
    REMOTE_USER = 'ubuntu'
    REMOTE_HOST = '3.27.35.53'
    REMOTE_DIR = '/home/ubuntu/backend-app'
    SSH_CREDENTIAL_ID = 'ec2-ssh-key'
    REMOTE_TMP = '/home/ubuntu/tmp'
    NVM_DIR = '/home/ubuntu/.nvm'
    NODE_VERSION = '18.19.1'
    FOREVER_UID = 'my-backend-api'

    
    }
    
    tools{
        nodejs 'NodeJS_16'
    }
    
    stages{
        stage('Clone Repo') {
            steps {
                git url: ' https://github.com/SeenIT-PTY-LTD/Diagnostica-Backend.git',
                    credentialsId: 'Diagnostica-app',
                    branch: 'test'
            }
        }
    
       
        stage('Install Dependencies'){
            steps{
                echo 'Cleaning npm cache...'
                sh 'npm cache clean --force'
                echo 'Installing dependencies with --legacy-peer-deps...'
                sh 'npm install --legacy-peer-deps'
            }
        }
        
        stage('Trivy Scan (Security & Secrets'){
            steps{
                echo 'Running Trivy scan...'
        sh '''
          trivy fs \
          --scanners vuln,secret \
          --exit-code 0 \
          --severity HIGH,CRITICAL \
          --format template \
          --template "@/usr/local/share/trivy/templates/html.tpl" \
          --output trivy-report.html \
          .
        '''
            }
        }
        
        /*
        stage('Run Unit Test'){
            steps{
                sh 'npm test || true'
            }
        }
       
        */
        
        stage('SonarQube Analysis') {
            environment {
                JAVA_HOME = "/usr/lib/jvm/java-17-openjdk-amd64"
                PATH = "${JAVA_HOME}/bin:${env.PATH}"
            }
	      steps {
                withSonarQubeEnv('SonarQube') {
                    withCredentials([string(credentialsId: 'sonar-token', variable: 'SONAR_TOKEN')]) {
                        sh '''
                            java -version
                            /opt/sonar-scanner/bin/sonar-scanner \
                            -Dsonar.projectKey=Diag-test \
                            -Dsonar.sources=. \
                            -Dsonar.host.url=http://69.62.83.226:9000 \
                            -Dsonar.login=$SONAR_TOKEN
                        '''
                    }
                }
            }    
        }
   
      
      stage('SSH Connection Test') {
  steps {
    sshagent(credentials: ["${SSH_CREDENTIAL_ID}"]) {
      sh """
        echo "üîó Testing SSH connection to EC2..."
        ssh -o StrictHostKeyChecking=no ${REMOTE_USER}@${REMOTE_HOST} 'echo \"‚úÖ SSH connection successful. Hostname: \$(hostname)\"'
      """
    }
  }
}

stage('Package') {
      steps {
        script {
          echo "Creating backend.tar.gz..."
          sh 'mkdir -p tmp_package'
          sh 'rsync -av --exclude=tmp_package --exclude=backend.tar.gz ./ tmp_package/'
          sh 'cd tmp_package && tar -czf ../backend.tar.gz . && cd ..'
          sh 'rm -rf tmp_package'
          sh 'ls -lh backend.tar.gz'
        }
      }
    }

    stage('Upload') {
      steps {
        sshagent(credentials: ["${SSH_CREDENTIAL_ID}"]) {
          sh """
            echo "Creating remote tmp folder..."
            ssh -o StrictHostKeyChecking=no ${REMOTE_USER}@${REMOTE_HOST} 'mkdir -p ${REMOTE_TMP}'

            echo "Uploading backend.tar.gz to remote..."
            scp -o StrictHostKeyChecking=no backend.tar.gz ${REMOTE_USER}@${REMOTE_HOST}:${REMOTE_TMP}/
          """
        }
      }
    }
    
    stage('Pre-Deploy Extract') {
      steps {
        sshagent(credentials: ["${SSH_CREDENTIAL_ID}"]) {
          sh """
            echo "Extracting tarball on remote server..."
            ssh -o StrictHostKeyChecking=no ${REMOTE_USER}@${REMOTE_HOST} '
              mkdir -p ${REMOTE_DIR} &&
              tar -xzf ${REMOTE_TMP}/backend.tar.gz -C ${REMOTE_DIR} &&
              rm ${REMOTE_TMP}/backend.tar.gz
            '
          """
        }
      }
    }

    stage('Verify') {
      steps {
        sshagent(credentials: ["${SSH_CREDENTIAL_ID}"]) {
          sh """
            echo "üîç Verifying extracted files..."
            ssh -o StrictHostKeyChecking=no ${REMOTE_USER}@${REMOTE_HOST} '
              echo "Listing files in ${REMOTE_DIR}:" &&
              ls -lah ${REMOTE_DIR}
            '
          """
        }
      }
    }

  stage('Deploy') {
      steps {
        sshagent(credentials: ["${SSH_CREDENTIAL_ID}"]) {
          sh """
            echo "Running final deploy commands..."
            ssh -o StrictHostKeyChecking=no ${REMOTE_USER}@${REMOTE_HOST} '
              set -e

              # Load NVM
              export NVM_DIR="${NVM_DIR}"
              [ -s "\$NVM_DIR/nvm.sh" ] && . "\$NVM_DIR/nvm.sh"

              nvm install ${NODE_VERSION}
              nvm use ${NODE_VERSION}

              cd ${REMOTE_DIR}

              # Install dependencies
              npm install

              # Stop old process if running
              forever stop my-backend-api || true

              # Start new process with --append to avoid log conflict
              forever start --uid "my-backend-api" --append --minUptime 1000 --spinSleepTime 1000 index.js
            '
          """
        }
      }
    }


  }
  post {
    always {
      echo 'Archiving Trivy HTML report...'
      archiveArtifacts artifacts: 'trivy-report.html', fingerprint: true

      publishHTML(target: [
        reportDir: '.',
        reportFiles: 'trivy-report.html',
        reportName: 'Trivy Vulnerability Report'
      ])
    }
  
    success {
      echo "‚úÖ Build and upload succeeded. Archive: ${env.ARCHIVE_NAME}"
    }

    failure {
      echo '‚ùå Pipeline failed. Please check logs and reports.'
    }
    
  }
}
